/*----------------------------------------------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2, or (at your option) any
later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than
Coco/R itself) does not fall under the GNU General Public License.
----------------------------------------------------------------------*/
-->begin
using System;
using System.Collections;

-->namespace

#if PARSER_WITH_AST
public class SynTree {
	public SynTree(Token t ) {
		tok = t;
		children = new ArrayList();
	}

	public Token tok;
	public ArrayList children;

	static void printIndent(int n) {
		for(int i=0; i < n; ++i) Console.Write(" ");
	}

	public void dump_all(int indent=0, bool isLast=false) {
        int last_idx = children.Count;
        if(tok.col > 0) {
            printIndent(indent);
            Console.WriteLine("{0}\t{1}\t{2}\t{3}\t{4}", ((isLast || (last_idx == 0)) ? "= " : " "), tok.line, tok.col, tok.kind, tok.val);
        }
        else {
            printIndent(indent);
            Console.WriteLine("{0}\t{1}\t{2}\t{3}", children.Count, tok.line, tok.kind, tok.val);
        }
        if(last_idx > 0) {
                for(int idx=0; idx < last_idx; ++idx) ((SynTree)children[idx]).dump_all(indent+4, idx == last_idx);
        }
	}

	public void dump_pruned(int indent=0, bool isLast=false) {
        int last_idx = children.Count;
        int indentPlus = 4;
        if(tok.col > 0) {
            printIndent(indent);
            Console.WriteLine("{0}\t{1}\t{2}\t{3}\t{4}", ((isLast || (last_idx == 0)) ? "= " : " "), tok.line, tok.col, tok.kind, tok.val);
        }
        else {
            if(last_idx == 1) {
                if(((SynTree)children[0]).cildren.Count == 0) {
                    printIndent(indent);
                    Console.WriteLine("{0}\t{1}\t{2}\t{3}", children.Count, tok.line, tok.kind, tok.val);
                }
                else indentPlus = 0;
            }
            else {
                printIndent(indent);
                Console.WriteLine("{0}\t{1}\t{2}\t{3}", children.Count, tok.line, tok.kind, tok.val);
            }
        }
        if(last_idx > 0) {
                for(int idx=0; idx < last_idx; ++idx) ((SynTree)children[idx]).dump_pruned(indent+indentPlus, idx == last_idx);
        }
	}
};
#endif

public class Parser {
-->constants
	const bool _T = true;
	const bool _x = false;
	const int minErrDist = 2;

	public Scanner scanner;
	public Errors  errors;

	public Token t;    // last recognized token
	public Token la;   // lookahead token
	int errDist = minErrDist;

-->declarations

	public Parser(Scanner scanner) {
		this.scanner = scanner;
		errors = new Errors();
	}

	void SynErr (int n) {
		if (errDist >= minErrDist) errors.SynErr(la.line, la.col, n);
		errDist = 0;
	}

	public void SemErr (string msg) {
		if (errDist >= minErrDist) errors.SemErr(t.line, t.col, msg);
		errDist = 0;
	}

	void Get () {
		for (;;) {
			t = la;
			la = scanner.Scan();
			if (la.kind <= maxT) { ++errDist; break; }
-->pragmas
			la = t;
		}
	}

	bool isKind(Token t, int n) {
		int k = t.kind;
		while(k >= 0) {
			if (k == n) return true;
			k = tBase[k];
		}
		return false;
	}

	void Expect (int n) {
		if (isKind(la, n)) Get(); else { SynErr(n); }
	}

	bool StartOf (int s) {
		return set[s, la.kind];
	}

	void ExpectWeak (int n, int follow) {
		if (isKind(la, n)) Get();
		else {
			SynErr(n);
			while (!StartOf(follow)) Get();
		}
	}


	bool WeakSeparator(int n, int syFol, int repFol) {
		int kind = la.kind;
		if (isKind(la, n)) {Get(); return true;}
		else if (StartOf(repFol)) {return false;}
		else {
			SynErr(n);
			while (!(set[syFol, kind] || set[repFol, kind] || set[0, kind])) {
				Get();
				kind = la.kind;
			}
			return StartOf(syFol);
		}
	}


-->productions

	public void Parse() {
		la = new Token();
		la.val = "";
		Get();
-->parseRoot
	}

	// a token's base type
	public static readonly int[] tBase = {
-->tbase
	};

	static readonly bool[,] set = {
-->initialization
	};

#if PARSER_WITH_AST
	public SynTree ast_root;
	Stack ast_stack;

	void AstAddTerminal() {
        SynTree st = new SynTree( t );
        ((SynTree)(ast_stack.Peek())).children.Add(st);
	}

	bool AstAddNonTerminal(int kind, string nt_name, int line) {
        Token ntTok = new Token();
        ntTok.kind = kind;
        ntTok.line = line;
        ntTok.val = nt_name;
        SynTree st = new SynTree( ntTok );
        ((SynTree)(ast_stack.Peek())).children.Add(st);
        ast_stack.Push(st);
        return true;
	}

	void AstPopNonTerminal() {
        ast_stack.Pop();
	}
#endif

} // end Parser


public class Errors {
	public int count = 0;                                    // number of errors detected
	public System.IO.TextWriter errorStream = Console.Out;   // error messages go to this stream
	public string errMsgFormat = "-- line {0} col {1}: {2}"; // 0=line, 1=column, 2=text

	public virtual void SynErr (int line, int col, int n) {
		string s;
		switch (n) {
-->errors
			default: s = "error " + n; break;
		}
		errorStream.WriteLine(errMsgFormat, line, col, s);
		count++;
	}

	public virtual void SemErr (int line, int col, string s) {
		errorStream.WriteLine(errMsgFormat, line, col, s);
		count++;
	}

	public virtual void SemErr (string s) {
		errorStream.WriteLine(s);
		count++;
	}

	public virtual void Warning (int line, int col, string s) {
		errorStream.WriteLine(errMsgFormat, line, col, s);
	}

	public virtual void Warning(string s) {
		errorStream.WriteLine(s);
	}
} // Errors


public class FatalError: Exception {
	public FatalError(string m): base(m) {}
}
